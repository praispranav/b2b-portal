{"version":3,"file":"aria-describer.d.ts","sources":["c:/Users/HP/Desktop/B2B/b2b-portal/node_modules/@angular/cdk/a11y/typings/aria-describer/aria-describer.d.ts"],"sourcesContent":["import { InjectionToken, OnDestroy, Optional } from '@angular/core';\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the `aria-describedby`.\n */\nexport interface RegisteredMessage {\n    /** The element containing the message. */\n    messageElement: Element;\n    /** The number of elements that reference this message element via `aria-describedby`. */\n    referenceCount: number;\n}\n/** ID used for the body container where all messages are appended. */\nexport declare const MESSAGES_CONTAINER_ID = \"cdk-describedby-message-container\";\n/** ID prefix used for each created message element. */\nexport declare const CDK_DESCRIBEDBY_ID_PREFIX = \"cdk-describedby-message\";\n/** Attribute given to each host element that is described by a message element. */\nexport declare const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = \"cdk-describedby-host\";\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * @docs-private\n */\nexport declare class AriaDescriber implements OnDestroy {\n    private _document;\n    constructor(_document: any);\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     */\n    describe(hostElement: Element, message: string): void;\n    /** Removes the host element's aria-describedby reference to the message element. */\n    removeDescription(hostElement: Element, message: string): void;\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy(): void;\n    /**\n     * Creates a new element in the visually hidden message container element with the message\n     * as its content and adds it to the message registry.\n     */\n    private _createMessageElement(message);\n    /** Deletes the message element from the global messages container. */\n    private _deleteMessageElement(message);\n    /** Creates the global container for all aria-describedby messages. */\n    private _createMessagesContainer();\n    /** Deletes the global messages container. */\n    private _deleteMessagesContainer();\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n    private _removeCdkDescribedByReferenceIds(element);\n    /**\n     * Adds a message reference to the element using aria-describedby and increments the registered\n     * message's reference count.\n     */\n    private _addMessageReference(element, message);\n    /**\n     * Removes a message reference from the element using aria-describedby\n     * and decrements the registered message's reference count.\n     */\n    private _removeMessageReference(element, message);\n    /** Returns true if the element has been described by the provided message ID. */\n    private _isElementDescribedByMessage(element, message);\n    /** Determines whether a message can be described on a particular element. */\n    private _canBeDescribed(element, message);\n}\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport declare function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher: AriaDescriber, _document: any): AriaDescriber;\n/** @docs-private @deprecated @breaking-change 7.0.0 */\nexport declare const ARIA_DESCRIBER_PROVIDER: {\n    provide: typeof AriaDescriber;\n    deps: (Optional[] | InjectionToken<any>)[];\n    useFactory: typeof ARIA_DESCRIBER_PROVIDER_FACTORY;\n};\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;;;;;;;;"}